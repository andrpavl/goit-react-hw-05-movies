{"version":3,"file":"static/js/186.8e1b6234.chunk.js","mappings":"yOA0DA,UArDe,WACb,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,IAAIC,gBADR,wCAEd,oGAEIH,GAAW,GAFf,UAGgCI,EAAAA,EAAAA,IAAUZ,GAH1C,QAGUa,EAHV,QAIsBC,KAAKC,QACrBX,EAAUS,EAAcC,KAAKC,SAG7BT,EAAS,gCARf,gDAYIA,EAAS,KAAMU,SAZnB,yBAcIR,GAAW,GAdf,6EAFc,sBAoBd,OApBc,mCAmBdS,GACO,kBAAMP,EAAUQ,OAAhB,CACR,GAAE,CAAClB,KAGF,gCACGK,IAAS,uBAAIA,IACbE,IAAW,SAAC,IAAD,IACXJ,GAAUA,EAAOgB,OAAS,GACzB,wBACGhB,EAAOiB,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC9B,OACE,2BACE,0BAAI,WAASF,MACb,uBAAIC,MAFGC,EAKZ,OAGH,wBACE,uBAAG,kDAKZ,C,mMCtDKC,EAAU,mCACVC,EAAW,gCAEV,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,oDACsCD,GACvDG,GAHG,cACCE,EADD,yBAKEA,GALF,kEAQA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA0B9B,EAAS2B,GAAnC,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,kBACIzB,EADJ,oCACuCwB,GACxDG,GAHG,cACCE,EADD,yBAMEA,GANF,kEASA,SAAeE,EAAtB,iDAAO,OAAP,oBAAO,WAAuB/B,EAAS2B,GAAhC,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,iBACGzB,EADH,2CAC6CwB,GAC9DG,GAHG,cACCE,EADD,yBAMEA,GANF,kEASA,SAAejB,EAAtB,iDAAO,OAAP,oBAAO,WAAyBZ,EAAS2B,GAAlC,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,iBACGzB,EADH,2CAC6CwB,GAC9DG,GAHG,cACCE,EADD,yBAMEA,GANF,kEASA,SAAeG,EAAtB,iDAAO,OAAP,oBAAO,WAAyBC,EAAON,GAAhC,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,+BACiBQ,EADjB,qBACmCT,GACpDG,GAHG,cACCE,EADD,yBAMEA,GANF,kE","sources":["components/Reviews/Reviews.jsx","utils/fetchs.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReview } from 'utils/fetchs';\nimport Loader from 'components/Loader/Loader';\n\nconst Review = () => {\n  const { movieId } = useParams();\n  const [review, setReview] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const abortCtrl = new AbortController();\n    async function renderReview() {\n      try {\n        setLoading(true);\n        const reviewDetails = await getReview(movieId);\n        if (reviewDetails.data.results) {\n          setReview(reviewDetails.data.results);\n          //   console.log(reviewDetails.data.results);\n        } else {\n          setError('Ooops, something is wrong...');\n          //   console.log(reviewDetails.data.results);\n        }\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    renderReview();\n    return () => abortCtrl.abort();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <p>{error}</p>}\n      {loading && <Loader />}\n      {review && review.length > 0 ? (\n        <ol>\n          {review.map(({ author, content, id }) => {\n            return (\n              <li key={id}>\n                <h4>Author: {author}</h4>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ol>\n      ) : (\n        <p>\n          <i> We don't have any reviews for this movie</i>\n        </p>\n      )}\n    </>\n  );\n};\n\nexport default Review;\n","import axios from 'axios';\n\nconst API_KEY = '8797bf46728068285205c5125a7a7653';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrending(signal) {\n  const resp = await axios.get(\n    `${BASE_URL}trending/all/day?language=en-US'&api_key=${API_KEY}`,\n    signal\n  );\n  return resp;\n}\n\nexport async function getDetails(movieId, signal) {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieId}?language=en-US?&api_key=${API_KEY}`,\n    signal\n  );\n\n  return resp;\n}\n\nexport async function getCast(movieId, signal) {\n  const resp = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`,\n    signal\n  );\n\n  return resp;\n}\n\nexport async function getReview(movieId, signal) {\n  const resp = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}`,\n    signal\n  );\n\n  return resp;\n}\n\nexport async function getMovies(query, signal) {\n  const resp = await axios.get(\n    `${BASE_URL}/search/movie?query=${query}?&api_key=${API_KEY}`,\n    signal\n  );\n\n  return resp;\n}\n"],"names":["movieId","useParams","useState","review","setReview","error","setError","loading","setLoading","useEffect","abortCtrl","AbortController","getReview","reviewDetails","data","results","message","renderReview","abort","length","map","author","content","id","API_KEY","BASE_URL","getTrending","signal","axios","resp","getDetails","getCast","getMovies","query"],"sourceRoot":""}