{"version":3,"file":"static/js/387.6e3de791.chunk.js","mappings":"8RAEaA,EAAYC,EAAAA,GAAAA,GAAH,iGAOTC,EAAYD,EAAAA,GAAAA,GAAH,8M,SCgEtB,EAnEa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,IAAIC,gBADR,wCAEd,oGAEIH,GAAW,GAFf,UAG8BI,EAAAA,EAAAA,IAAQZ,GAHtC,QAGUa,EAHV,QAIoBC,KAAKX,KACnBC,EAAQS,EAAYC,KAAKX,MAGzBG,EAAS,gCARf,gDAWIA,EAAS,KAAMS,SAXnB,yBAaIP,GAAW,GAbf,6EAFc,sBAmBd,OAnBc,mCAkBdQ,GACO,kBAAMN,EAAUO,OAAhB,CACR,GAAE,CAACjB,KAKF,gCACGK,IAAS,uBAAIA,IACbE,IAAW,SAACW,EAAA,EAAD,KACVX,GAAWJ,IACX,SAACN,EAAD,UACGM,EAAKgB,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,aAAcC,EAAS,EAATA,GAC1C,OACE,UAACxB,EAAD,WACGuB,GACC,gBACEE,IAAG,yCAAoCF,GACvCG,IAAKJ,EACLK,MAAM,QACNC,OAAO,WAGT,gBACEH,IAAI,0EACJC,IAAI,WACJC,MAAM,QACNC,OAAO,WAGX,uBAAIN,KACJ,0BACE,uBAAG,eAAc,IAAED,OAlBPG,EAsBnB,QAKV,C,mMCrEKK,EAAU,mCACVC,EAAW,gCAEV,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,oDACsCD,GACvDG,GAHG,cACCE,EADD,yBAKEA,GALF,kEAQA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA0BlC,EAAS+B,GAAnC,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,kBACI7B,EADJ,oCACuC4B,GACxDG,GAHG,cACCE,EADD,yBAMEA,GANF,kEASA,SAAerB,EAAtB,iDAAO,OAAP,oBAAO,WAAuBZ,EAAS+B,GAAhC,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,iBACG7B,EADH,2CAC6C4B,GAC9DG,GAHG,cACCE,EADD,yBAMEA,GANF,kEASA,SAAeE,EAAtB,iDAAO,OAAP,oBAAO,WAAyBnC,EAAS+B,GAAlC,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,iBACG7B,EADH,2CAC6C4B,GAC9DG,GAHG,cACCE,EADD,yBAMEA,GANF,kEASA,SAAeG,EAAtB,iDAAO,OAAP,oBAAO,WAAyBC,EAAON,GAAhC,uFACcC,EAAAA,EAAAA,IAAA,UACdH,EADc,+BACiBQ,EADjB,qBACmCT,GACpDG,GAHG,cACCE,EADD,yBAMEA,GANF,kE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","utils/fetchs.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  list-style: none;\n`;\n\nexport const ActorCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: gainsboro;\n  padding: 8px;\n  width: 200px;\n  border-radius: 8px;\n\n`;\n\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'utils/fetchs';\nimport Loader from 'components/Loader/Loader';\nimport { ActorList, ActorCard } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const abortCtrl = new AbortController();\n    async function renderCast() {\n      try {\n        setLoading(true);\n        const castDetails = await getCast(movieId);\n        if (castDetails.data.cast) {\n          setCast(castDetails.data.cast);\n          //   console.log(castDetails);\n        } else {\n          setError('Ooops, something is wrong...');\n        }\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    renderCast();\n    return () => abortCtrl.abort();\n  }, [movieId]);\n\n  //   console.log(cast);\n\n  return (\n    <>\n      {error && <p>{error}</p>}\n      {loading && <Loader />}\n      {!loading && cast && (\n        <ActorList>\n          {cast.map(({ character, name, profile_path, id }) => {\n            return (\n              <ActorCard key={id}>\n                {profile_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                    alt={name}\n                    width=\"150px\"\n                    height=\"200px\"\n                  />\n                ) : (\n                  <img\n                    src=\"https://i.pinimg.com/564x/fc/04/73/fc047347b17f7df7ff288d78c8c281cf.jpg\"\n                    alt=\"no_image\"\n                    width=\"150px\"\n                    height=\"200px\"\n                  />\n                )}\n                <p>{name}</p>\n                <p>\n                  <b>Character:</b> {character}\n                </p>\n              </ActorCard>\n            );\n          })}\n        </ActorList>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '8797bf46728068285205c5125a7a7653';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrending(signal) {\n  const resp = await axios.get(\n    `${BASE_URL}trending/all/day?language=en-US'&api_key=${API_KEY}`,\n    signal\n  );\n  return resp;\n}\n\nexport async function getDetails(movieId, signal) {\n  const resp = await axios.get(\n    `${BASE_URL}/movie/${movieId}?language=en-US?&api_key=${API_KEY}`,\n    signal\n  );\n\n  return resp;\n}\n\nexport async function getCast(movieId, signal) {\n  const resp = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`,\n    signal\n  );\n\n  return resp;\n}\n\nexport async function getReview(movieId, signal) {\n  const resp = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}`,\n    signal\n  );\n\n  return resp;\n}\n\nexport async function getMovies(query, signal) {\n  const resp = await axios.get(\n    `${BASE_URL}/search/movie?query=${query}?&api_key=${API_KEY}`,\n    signal\n  );\n\n  return resp;\n}\n"],"names":["ActorList","styled","ActorCard","movieId","useParams","useState","cast","setCast","error","setError","loading","setLoading","useEffect","abortCtrl","AbortController","getCast","castDetails","data","message","renderCast","abort","Loader","map","character","name","profile_path","id","src","alt","width","height","API_KEY","BASE_URL","getTrending","signal","axios","resp","getDetails","getReview","getMovies","query"],"sourceRoot":""}